{"version":3,"file":"static/js/392.adc7af15.chunk.js","mappings":"mRAEMA,EAAc,IAAIC,IASlBC,EAA+C,IAAIC,QACrDC,EAAS,EAETC,OAAwC,EA6BrC,SAASC,EAAYC,GAC1B,OAAOC,OAAOC,KAAKF,GAChBG,OACAC,QACEC,QAA2D,IAAnDL,EAAQK,KAElBC,KAAKD,IACJ,MAAO,GAAGA,KACA,SAARA,GArBWE,EAsBGP,EAAQO,KArBvBA,GACDZ,EAAQa,IAAID,KAChBV,GAAU,EACVF,EAAQc,IAAIF,EAAMV,EAAOa,aAFKf,EAAQgB,IAAIJ,IADxB,KAsBRP,EAAQK,KAvBpB,IAAmBE,CAwBX,IAEHG,UACL,CA4DO,SAASE,EACdC,EACAC,GAGA,IAFAd,EAAAe,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAoC,CAAC,EACrCG,EAAAH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAiBjB,EAEjB,GACyC,qBAAhCqB,OAAOC,2BACK,IAAnBF,EACA,CACA,MAAMG,EAASR,EAAQS,wBAWvB,OAVAR,EAASI,EAAgB,CACvBK,eAAgBL,EAChBM,OAAQX,EACRY,kBAC+B,kBAAtBzB,EAAQ0B,UAAyB1B,EAAQ0B,UAAY,EAC9DC,KAAM,EACNC,mBAAoBP,EACpBQ,iBAAkBR,EAClBS,WAAYT,IAEP,MAGT,CAEA,MAAM,GAAEU,EAAA,SAAIC,EAAA,SAAUC,GApFxB,SAAwBjC,GAEtB,MAAM+B,EAAKhC,EAAYC,GACvB,IAAIkC,EAAWzC,EAAYkB,IAAIoB,GAE/B,IAAKG,EAAU,CAEb,MAAMD,EAAW,IAAIvC,IAErB,IAAIyC,EAEJ,MAAMH,EAAW,IAAIZ,sBAAsBgB,IACzCA,EAAQC,SAASC,IAvEvB,IAAAC,EA0EQ,MAAMC,EACJF,EAAMf,gBACNY,EAAWM,MAAMf,GAAcY,EAAMb,mBAAqBC,IAGxD1B,EAAQ0C,iBAA8C,qBAApBJ,EAAMK,YAG1CL,EAAMK,UAAYH,GAGpB,OAAAD,EAAAN,EAAStB,IAAI2B,EAAMd,UAAnBe,EAA4BF,SAASvB,IACnCA,EAAS0B,EAAQF,EAAM,GACvB,GACF,GACDtC,GAGHmC,EACEH,EAASG,aACRS,MAAMC,QAAQ7C,EAAQ0B,WACnB1B,EAAQ0B,UACR,CAAC1B,EAAQ0B,WAAa,IAE5BQ,EAAW,CACTH,KACAC,WACAC,YAGFxC,EAAYgB,IAAIsB,EAAIG,EACtB,CAEA,OAAOA,CACT,CAmCqCY,CAAe9C,GAG5C+C,EAAYd,EAAStB,IAAIE,IAAY,GAQ3C,OAPKoB,EAASzB,IAAIK,IAChBoB,EAASxB,IAAII,EAASkC,GAGxBA,EAAUC,KAAKlC,GACfkB,EAASpB,QAAQC,GAEV,WAELkC,EAAUE,OAAOF,EAAUG,QAAQpC,GAAW,GAErB,IAArBiC,EAAU/B,SAEZiB,EAASkB,OAAOtC,GAChBmB,EAASoB,UAAUvC,IAGC,IAAlBoB,EAASoB,OAEXrB,EAASsB,aACT7D,EAAY0D,OAAOpB,GAEvB,CACF,CC1GkCwB,EAAAA,U,gDCtDlC,MAAMC,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAK;;;;EAMzBC,EAAsBF,EAAAA,GAAOG,GAAG;;;;;;;sBAOhBC,GAASA,EAAMC,SAAW,UAAY;;eAE7CD,GAASA,EAAMC,SAAW,aAAe;aAC3CD,GAASA,EAAMC,SAAW,GAAK;gBAC5BD,GAASA,EAAMC,SAAW,mBAAqB;UACrDD,IAAK,IAAAE,EAAA,OAAkB,QAAdA,EAAAF,EAAMG,gBAAQ,IAAAD,OAAA,EAAdA,EAAgBE,IAAK,CAAC;SAChCJ,IAAK,IAAAK,EAAA,OAAkB,QAAdA,EAAAL,EAAMG,gBAAQ,IAAAE,OAAA,EAAdA,EAAgBC,IAAK,CAAC;;;;;;;;;wBAShBN,GAASA,EAAMC,SAAW,UAAY;;;;;;;;;;;gBAW9CD,GAASA,EAAMO,eAAiB;;;;;;kBAM9BP,GAASA,EAAMC,SAAW,UAAY;;;;;;;;kBAQtCD,GAASA,EAAMC,SAAW,mBAAqB;;;;;;;;;EAW3DO,EAAQZ,EAAAA,GAAOa,EAAE;;;;;;;;;EAWjBC,EAAWd,EAAAA,GAAOe,CAAC;;;;;;;;;EAWnBC,EAAUhB,EAAAA,GAAOe,CAAC;;;;;;;;;;EAYlBE,EAAkBjB,EAAAA,GAAOG,GAAG;;;;;;;;;;;EAa5Be,EAAWlB,EAAAA,GAAOG,GAAG;;;;;;;;;;;;;;;;IAgBvBD;;;;EAMEiB,EAAarB,EAAAA,YAAiB,CAAAsB,EAA+BC,KAAS,IAAvC,KAAEC,EAAI,SAAEjB,EAAQ,SAAEkB,GAAUH,EAC/D,MAAQC,IAAKG,EAAS,OAAEzC,GC7GnB,WAW0C,IAXvB,UACxBd,EAAA,MACAwD,EAAA,gBACAxC,EAAA,WACAyC,EAAA5E,KACAA,EAAA,YACA6E,EAAA,KACAC,EAAA,cACAC,EAAA,eACApE,EAAA,SACAqE,GACFxE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAyB,CAAC,EA9C1B,IAAAwB,EA+CE,MAAOuC,EAAKU,GAAgBC,EAAAA,SAAyB,MAC/C3E,EAAiB2E,EAAAA,OAAwCF,IACxDG,EAAOC,GAAkBF,EAAAA,SAAgB,CAC9CjD,SAAU8C,EACVhD,WAAO,IAKTxB,EAAS8E,QAAUL,EAGbE,EAAAA,WACJ,KAEE,GAAIJ,IAASP,EAAK,OAElB,IAAI1B,EA4BJ,OA3BAA,EAAYxC,EACVkE,GACA,CAACtC,EAAQF,KACPqD,EAAS,CACPnD,SACAF,UAEExB,EAAS8E,SAAS9E,EAAS8E,QAAQpD,EAAQF,GAE3CA,EAAMf,gBAAkB6D,GAAehC,IAEzCA,IACAA,OAAY,EACd,GAEF,CACE7C,OACA4E,aACAzD,YAEAgB,kBAEAwC,SAEFhE,GAGK,KACDkC,GACFA,GACF,CACD,GAIH,CAEER,MAAMC,QAAQnB,GAAaA,EAAUhB,WAAagB,EAClDoD,EACAvE,EACA4E,EACAC,EACAC,EACA3C,EACAxB,EACAgE,IAIJ,MAAMW,EAAc,OAAAtD,EAAAmD,EAAMpD,YAAN,EAAAC,EAAaf,OAC3BsE,EAA4BL,EAAAA,YAA4B,GAE3DX,IACDe,GACCT,GACAC,GACDS,EAAoBF,UAAYC,IAIhCC,EAAoBF,QAAUC,EAC9BF,EAAS,CACPnD,SAAU8C,EACVhD,WAAO,KAIX,MAAMyD,EAAS,CAACP,EAAQE,EAAMlD,OAAQkD,EAAMpD,OAO5C,OAJAyD,EAAOjB,IAAMiB,EAAO,GACpBA,EAAOvD,OAASuD,EAAO,GACvBA,EAAOzD,MAAQyD,EAAO,GAEfA,CACT,CDIqCC,CAAU,CAC3CtE,UAAW,GACX0D,aAAa,IAef,OANAa,EAAAA,EAAAA,YAAU,KACJzD,GACFwC,EAASD,EAAKhD,GAChB,GACC,CAACS,EAAQuC,EAAKhD,GAAIiD,KAGnBkB,EAAAA,EAAAA,KAACC,EAAAA,GAAO,CAACC,KAAM,cAAcrB,EAAKhD,KAAKsE,UACrCH,EAAAA,EAAAA,KAAC1C,EAAU,CAAC8C,GAAI,WAAWvB,EAAKhD,KAAKsE,UACnCE,EAAAA,EAAAA,MAAC5C,EAAmB,CAClBmB,IAfS0B,IACf1B,GAAOA,EAAI0B,GACXvB,EAAUuB,EAAK,EAcT1C,SAAUA,EACVE,SAAUe,EAAKf,SACfI,cAAeW,EAAKhD,GAAGsE,SAAA,EAEvBH,EAAAA,EAAAA,KAAC7B,EAAK,CAAAgC,SAAEtB,EAAK0B,SACbP,EAAAA,EAAAA,KAAC3B,EAAQ,CAAA8B,SAAEtB,EAAK2B,YAChBR,EAAAA,EAAAA,KAACzB,EAAO,CAAA4B,SAAEtB,EAAK4B,WAEfT,EAAAA,EAAAA,KAACxB,EAAe,CAAA2B,SACbtB,EAAK6B,OAAOtG,KAAI,CAACuG,EAAOC,KACvBZ,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAAaF,MAAOA,GAAdC,QAIrBZ,EAAAA,EAAAA,KAACvB,EAAQ,CAAA0B,SAAC,uBAGN,IAsBdzB,EAAWoC,aAAe,CACxBlD,UAAU,EACViB,KAAM,CACJhD,GAAI,GACJ0E,MAAO,GACPC,SAAU,GACVC,QAAS,GACT3C,SAAU,CAAEC,EAAG,EAAGE,EAAG,GACrByC,OAAQ,KAIZ,S","sources":["../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","components/StoryMap/Checkpoint.jsx","../node_modules/react-intersection-observer/src/useInView.tsx"],"sourcesContent":["import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","// src/components/StoryMap/Checkpoint.jsx\r\nimport React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types'; // For prop validation\r\nimport { useInView } from 'react-intersection-observer';\r\nimport { Link } from 'react-router-dom';\r\nimport SkillBadge from '../UI/SkillBadge';\r\nimport styled from 'styled-components';\r\nimport { Element } from 'react-scroll';\r\n\r\n// We need to style a Link from react-router-dom\r\nconst StyledLink = styled(Link)`\r\n  text-decoration: none;\r\n  display: block;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst CheckpointContainer = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  max-width: 220px;\r\n  background-color: rgba(18, 25, 52, 0.9); /* Increased opacity for better contrast */\r\n  border-radius: 8px;\r\n  padding: 18px; /* Increased padding */\r\n  border: 1px solid ${props => props.isActive ? '#ff4d79' : '#304878'};\r\n  transition: all 0.3s ease;\r\n  transform: ${props => props.isActive ? 'scale(1.1)' : 'scale(1)'};\r\n  z-index: ${props => props.isActive ? 15 : 5};\r\n  box-shadow: ${props => props.isActive ? '0 0 15px #ff4d79' : '0 4px 20px rgba(0, 0, 0, 0.2)'};\r\n  left: ${props => props.position?.x || 0}px;\r\n  top: ${props => props.position?.y || 0}px;\r\n\r\n  @media (max-width: 768px) {\r\n    position: relative !important;\r\n    left: 0 !important;\r\n    top: 0 !important;\r\n    max-width: 100%;\r\n    margin: 40px auto; /* Increased vertical margin for better spacing */\r\n    transform: scale(1) !important; \r\n    border: 1px solid ${props => props.isActive ? '#ff4d79' : '#304878'};\r\n  }\r\n  \r\n  @media (max-width: 480px) {\r\n    padding: 16px;\r\n    margin: 30px auto; /* Better spacing */\r\n    margin-top: 30px;\r\n    width: 92%;\r\n  }\r\n\r\n  &:before {\r\n    content: '${props => props.checkpoint_id || ''}';\r\n    position: absolute;\r\n    left: -15px;\r\n    top: -15px;\r\n    width: 32px; /* Slightly larger */\r\n    height: 32px;\r\n    background: ${props => props.isActive ? '#ff4d79' : '#304878'};\r\n    border-radius: 50%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: white;\r\n    font-weight: bold;\r\n    z-index: 20;\r\n    box-shadow: ${props => props.isActive ? '0 0 10px #ff4d79' : 'none'};\r\n  }\r\n\r\n  &:hover {\r\n    transform: scale(1.1);\r\n    border-color: #ff4d79;\r\n    box-shadow: 0 0 15px #ff4d79;\r\n    z-index: 15; /* Bring hovered checkpoints to the top */\r\n  }\r\n`;\r\n\r\nconst Title = styled.h3`\r\n  color: white;\r\n  margin: 0 0 8px; /* Increased margin */\r\n  font-size: 1.1rem;\r\n  \r\n  @media (max-width: 480px) {\r\n    font-size: 1.25rem; /* Increased font size for mobile */\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nconst Subtitle = styled.p`\r\n  color: #b8c4d9;\r\n  margin: 0 0 12px; /* Increased margin */\r\n  font-size: 0.9rem;\r\n  \r\n  @media (max-width: 480px) {\r\n    font-size: 1rem; /* Increased font size for mobile */\r\n    margin-bottom: 14px;\r\n  }\r\n`;\r\n\r\nconst Details = styled.p`\r\n  color: white;\r\n  font-size: 0.85rem;\r\n  margin: 0 0 14px; /* Increased margin */\r\n  line-height: 1.5; /* Improved line height for readability */\r\n  \r\n  @media (max-width: 480px) {\r\n    font-size: 0.95rem; /* Increased font size for mobile */\r\n    line-height: 1.6;\r\n  }\r\n`;\r\n\r\nconst SkillsContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 6px; /* Increased gap */\r\n  margin-top: 12px;\r\n\r\n  @media (max-width: 480px) {\r\n    justify-content: flex-start; /* Changed to flex-start for better alignment */\r\n    gap: 8px;\r\n    margin-top: 16px;\r\n  }\r\n`;\r\n\r\nconst ViewMore = styled.div`\r\n  display: inline-block;\r\n  margin-top: 14px;\r\n  padding: 6px 12px; /* Increased padding */\r\n  background: #304878;\r\n  border-radius: 4px;\r\n  color: white;\r\n  font-size: 0.8rem;\r\n  transition: background 0.3s, transform 0.2s;\r\n  \r\n  @media (max-width: 480px) {\r\n    font-size: 0.9rem;\r\n    padding: 8px 14px;\r\n    margin-top: 18px;\r\n  }\r\n\r\n  ${CheckpointContainer}:hover & {\r\n    background: #ff4d79;\r\n    transform: translateY(-2px); /* Subtle lift effect */\r\n  }\r\n`;\r\n\r\nconst Checkpoint = React.forwardRef(({ data, isActive, onInView }, ref) => {\r\n  const { ref: inViewRef, inView } = useInView({\r\n    threshold: 0.5,\r\n    triggerOnce: false,\r\n  });\r\n\r\n  // Combine refs for CheckpointContainer\r\n  const setRefs = (node) => {\r\n    ref && ref(node);\r\n    inViewRef(node);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (inView) {\r\n      onInView(data.id);\r\n    }\r\n  }, [inView, data.id, onInView]);\r\n\r\n  return (\r\n    <Element name={`checkpoint-${data.id}`}>\r\n      <StyledLink to={`/detail/${data.id}`}>\r\n        <CheckpointContainer\r\n          ref={setRefs}\r\n          isActive={isActive}\r\n          position={data.position}\r\n          checkpoint_id={data.id}\r\n        >\r\n          <Title>{data.title}</Title>\r\n          <Subtitle>{data.subtitle}</Subtitle>\r\n          <Details>{data.details}</Details>\r\n\r\n          <SkillsContainer>\r\n            {data.skills.map((skill, index) => (\r\n              <SkillBadge key={index} skill={skill} />\r\n            ))}\r\n          </SkillsContainer>\r\n\r\n          <ViewMore>View Details</ViewMore>\r\n        </CheckpointContainer>\r\n      </StyledLink>\r\n    </Element>\r\n  );\r\n});\r\n\r\n// Prop validation\r\nCheckpoint.propTypes = {\r\n  data: PropTypes.shape({\r\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    subtitle: PropTypes.string,\r\n    details: PropTypes.string,\r\n    position: PropTypes.shape({\r\n      x: PropTypes.number,\r\n      y: PropTypes.number,\r\n    }),\r\n    skills: PropTypes.arrayOf(PropTypes.string),\r\n  }).isRequired,\r\n  isActive: PropTypes.bool,\r\n  onInView: PropTypes.func.isRequired,\r\n};\r\n\r\n// Default props\r\nCheckpoint.defaultProps = {\r\n  isActive: false,\r\n  data: {\r\n    id: '',\r\n    title: '',\r\n    subtitle: '',\r\n    details: '',\r\n    position: { x: 0, y: 0 },\r\n    skills: [],\r\n  },\r\n};\r\n\r\nexport default Checkpoint;","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>(onChange);\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element | undefined>(undefined);\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","map","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","StyledLink","styled","Link","CheckpointContainer","div","props","isActive","_props$position","position","x","_props$position2","y","checkpoint_id","Title","h3","Subtitle","p","Details","SkillsContainer","ViewMore","Checkpoint","_ref","ref","data","onInView","inViewRef","delay","rootMargin","triggerOnce","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result","useInView","useEffect","_jsx","Element","name","children","to","_jsxs","node","title","subtitle","details","skills","skill","index","SkillBadge","defaultProps"],"sourceRoot":""}