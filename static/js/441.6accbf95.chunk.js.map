{"version":3,"file":"static/js/441.6accbf95.chunk.js","mappings":"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","sources":["hooks/useParallax.js","components/StoryMap/ParallaxLayer.jsx"],"sourcesContent":["\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst useParallax = (ref) => {\r\n  const [position, setPosition] = useState({ x: 0, y: 0 });\r\n\r\n  useEffect(() => {\r\n    if (!ref.current) return;\r\n\r\n    const handleMouseMove = (e) => {\r\n      const { clientX, clientY } = e;\r\n      const { width, height } = window.innerWidth || document.documentElement.clientWidth;\r\n      \r\n      // Calculate position relative to center of screen\r\n      const x = clientX - width / 2;\r\n      const y = clientY - height / 2;\r\n      \r\n      setPosition({ x, y });\r\n    };\r\n\r\n    window.addEventListener('mousemove', handleMouseMove);\r\n    \r\n    return () => {\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n    };\r\n  }, [ref]);\r\n\r\n  return position;\r\n};\r\n\r\nexport default useParallax;","import React, { useRef, useEffect, useState, useMemo } from 'react';\r\nimport styled from 'styled-components';\r\nimport useParallax from '../../hooks/useParallax';\r\n\r\nconst Layer = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: 1;\r\n  pointer-events: none;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst CircuitLine = styled.div`\r\n  position: absolute;\r\n  background: linear-gradient(\r\n    to right, \r\n    transparent, \r\n    rgba(48, 72, 120, 0.3), \r\n    rgba(255, 77, 121, 0.3), \r\n    transparent\r\n  );\r\n  height: 1px;\r\n  width: 100%;\r\n  opacity: 0.2;\r\n  animation: circuitFlow 10s linear infinite;\r\n  \r\n  @keyframes circuitFlow {\r\n    0% {\r\n      transform: translateX(-100%);\r\n    }\r\n    100% {\r\n      transform: translateX(100%);\r\n    }\r\n  }\r\n`;\r\n\r\nconst DataNode = styled.div`\r\n  position: absolute;\r\n  width: 6px;\r\n  height: 6px;\r\n  background: linear-gradient(135deg, #ff4d79, #304878);\r\n  border-radius: 50%;\r\n  opacity: 0.7;\r\n  box-shadow: 0 0 8px rgba(255, 77, 121, 0.5);\r\n  animation: pulseNode 3s infinite ease-in-out;\r\n  \r\n  @keyframes pulseNode {\r\n    0%, 100% { transform: scale(1); }\r\n    50% { transform: scale(1.5); }\r\n  }\r\n`;\r\n\r\nconst TechGradientBackground = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: linear-gradient(\r\n    45deg, \r\n    rgba(48, 72, 120, 0.05), \r\n    rgba(255, 77, 121, 0.05)\r\n  );\r\n  opacity: 0.8;\r\n  z-index: -2;\r\n  filter: blur(100px);\r\n  animation: backgroundFlow 15s ease infinite alternate;\r\n  \r\n  @keyframes backgroundFlow {\r\n    0% { opacity: 0.6; transform: scale(1); }\r\n    100% { opacity: 0.8; transform: scale(1.1); }\r\n  }\r\n`;\r\n\r\nconst GridOverlay = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-image: \r\n    linear-gradient(0deg, transparent 24%, rgba(48, 72, 120, 0.05) 25%, rgba(48, 72, 120, 0.05) 26%, transparent 27%, transparent 74%, rgba(48, 72, 120, 0.05) 75%, rgba(48, 72, 120, 0.05) 76%, transparent 77%, transparent),\r\n    linear-gradient(90deg, transparent 24%, rgba(48, 72, 120, 0.05) 25%, rgba(48, 72, 120, 0.05) 26%, transparent 27%, transparent 74%, rgba(48, 72, 120, 0.05) 75%, rgba(48, 72, 120, 0.05) 76%, transparent 77%, transparent);\r\n  background-size: 50px 50px;\r\n  opacity: 0.1;\r\n  z-index: -1;\r\n`;\r\n\r\nconst ParallaxLayer = () => {\r\n  const ref = useRef(null);\r\n  const { x, y } = useParallax(ref);\r\n  const [mouseX, setMouseX] = useState(0);\r\n  const [mouseY, setMouseY] = useState(0);\r\n\r\n  // Generate tech nodes\r\n  const techNodes = useMemo(() => {\r\n    const isDesktop = window.innerWidth > 768;\r\n    return Array.from({ length: isDesktop ? 30 : 15 }).map(() => ({\r\n      top: Math.random() * 100,\r\n      left: Math.random() * 100,\r\n      size: Math.random() * 3 + 2,\r\n      delay: Math.random() * 5,\r\n    }));\r\n  }, []);\r\n\r\n  // Generate circuit lines\r\n  const circuitLines = useMemo(() => {\r\n    const isDesktop = window.innerWidth > 768;\r\n    return Array.from({ length: isDesktop ? 10 : 5 }).map(() => ({\r\n      top: Math.random() * 100,\r\n      delay: Math.random() * 5,\r\n    }));\r\n  }, []);\r\n\r\n  const handleMouseMove = (e) => {\r\n    const { clientX, clientY, currentTarget } = e;\r\n    const rect = currentTarget.getBoundingClientRect();\r\n    setMouseX((clientX - rect.left) / rect.width - 0.5);\r\n    setMouseY((clientY - rect.top) / rect.height - 0.5);\r\n  };\r\n\r\n  return (\r\n    <div ref={ref} onMouseMove={handleMouseMove} style={{ position: 'relative', width: '100%', height: '100%' }}>\r\n      <TechGradientBackground \r\n        style={{\r\n          transform: `translate(${mouseX * 20}px, ${mouseY * 20}px)`,\r\n        }}\r\n      />\r\n      <GridOverlay />\r\n      <Layer>\r\n        {/* Circuit Lines */}\r\n        {circuitLines.map((line, index) => (\r\n          <CircuitLine\r\n            key={`circuit-${index}`}\r\n            style={{\r\n              top: `${line.top}%`,\r\n              animationDelay: `${line.delay}s`,\r\n            }}\r\n          />\r\n        ))}\r\n\r\n        {/* Tech Nodes */}\r\n        {techNodes.map((node, index) => (\r\n          <DataNode\r\n            key={`node-${index}`}\r\n            style={{\r\n              top: `${node.top}%`,\r\n              left: `${node.left}%`,\r\n              width: `${node.size}px`,\r\n              height: `${node.size}px`,\r\n              transform: `translate(${mouseX * 10}px, ${mouseY * 10}px)`,\r\n              animationDelay: `${node.delay}s`,\r\n            }}\r\n          />\r\n        ))}\r\n      </Layer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ParallaxLayer;"],"names":["ref","position","setPosition","useState","x","y","useEffect","current","handleMouseMove","e","clientX","clientY","width","height","window","innerWidth","document","documentElement","clientWidth","addEventListener","removeEventListener","Layer","styled","div","CircuitLine","DataNode","TechGradientBackground","GridOverlay","ParallaxLayer","useRef","useParallax","mouseX","setMouseX","mouseY","setMouseY","techNodes","useMemo","isDesktop","Array","from","length","map","top","Math","random","left","size","delay","circuitLines","_jsxs","onMouseMove","currentTarget","rect","getBoundingClientRect","style","children","_jsx","transform","line","index","animationDelay","node"],"sourceRoot":""}