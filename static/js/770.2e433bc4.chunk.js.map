{"version":3,"file":"static/js/770.2e433bc4.chunk.js","mappings":"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","sources":["../node_modules/react-swipeable/src/index.ts","../node_modules/react-swipeable/src/types.ts","components/UI/NavigationDots.jsx"],"sourcesContent":["/* global document */\nimport * as React from \"react\";\nimport {\n  AttachTouch,\n  SwipeDirections,\n  DOWN,\n  SwipeEventData,\n  HandledEvents,\n  LEFT,\n  RIGHT,\n  Setter,\n  ConfigurationOptions,\n  SwipeableDirectionCallbacks,\n  SwipeableHandlers,\n  SwipeableProps,\n  SwipeablePropsWithDefaultOptions,\n  SwipeableState,\n  SwipeCallback,\n  TapCallback,\n  UP,\n  Vector2,\n} from \"./types\";\n\nexport {\n  LEFT,\n  RIGHT,\n  UP,\n  DOWN,\n  SwipeDirections,\n  SwipeEventData,\n  SwipeableDirectionCallbacks,\n  SwipeCallback,\n  TapCallback,\n  SwipeableHandlers,\n  SwipeableProps,\n  Vector2,\n};\n\nconst defaultProps: ConfigurationOptions = {\n  delta: 10,\n  preventScrollOnSwipe: false,\n  rotationAngle: 0,\n  trackMouse: false,\n  trackTouch: true,\n  swipeDuration: Infinity,\n  touchEventOptions: { passive: true },\n};\nconst initialState: SwipeableState = {\n  first: true,\n  initial: [0, 0],\n  start: 0,\n  swiping: false,\n  xy: [0, 0],\n};\nconst mouseMove = \"mousemove\";\nconst mouseUp = \"mouseup\";\nconst touchEnd = \"touchend\";\nconst touchMove = \"touchmove\";\nconst touchStart = \"touchstart\";\n\nfunction getDirection(\n  absX: number,\n  absY: number,\n  deltaX: number,\n  deltaY: number\n): SwipeDirections {\n  if (absX > absY) {\n    if (deltaX > 0) {\n      return RIGHT;\n    }\n    return LEFT;\n  } else if (deltaY > 0) {\n    return DOWN;\n  }\n  return UP;\n}\n\nfunction rotateXYByAngle(pos: Vector2, angle: number): Vector2 {\n  if (angle === 0) return pos;\n  const angleInRadians = (Math.PI / 180) * angle;\n  const x =\n    pos[0] * Math.cos(angleInRadians) + pos[1] * Math.sin(angleInRadians);\n  const y =\n    pos[1] * Math.cos(angleInRadians) - pos[0] * Math.sin(angleInRadians);\n  return [x, y];\n}\n\nfunction getHandlers(\n  set: Setter,\n  handlerProps: { trackMouse: boolean | undefined }\n): [\n  {\n    ref: (element: HTMLElement | null) => void;\n    onMouseDown?: (event: React.MouseEvent) => void;\n  },\n  AttachTouch\n] {\n  const onStart = (event: HandledEvents) => {\n    const isTouch = \"touches\" in event;\n    // if more than a single touch don't track, for now...\n    if (isTouch && event.touches.length > 1) return;\n\n    set((state, props) => {\n      // setup mouse listeners on document to track swipe since swipe can leave container\n      if (props.trackMouse && !isTouch) {\n        document.addEventListener(mouseMove, onMove);\n        document.addEventListener(mouseUp, onUp);\n      }\n      const { clientX, clientY } = isTouch ? event.touches[0] : event;\n      const xy = rotateXYByAngle([clientX, clientY], props.rotationAngle);\n\n      props.onTouchStartOrOnMouseDown &&\n        props.onTouchStartOrOnMouseDown({ event });\n\n      return {\n        ...state,\n        ...initialState,\n        initial: xy.slice() as Vector2,\n        xy,\n        start: event.timeStamp || 0,\n      };\n    });\n  };\n\n  const onMove = (event: HandledEvents) => {\n    set((state, props) => {\n      const isTouch = \"touches\" in event;\n      // Discount a swipe if additional touches are present after\n      // a swipe has started.\n      if (isTouch && event.touches.length > 1) {\n        return state;\n      }\n\n      // if swipe has exceeded duration stop tracking\n      if (event.timeStamp - state.start > props.swipeDuration) {\n        return state.swiping ? { ...state, swiping: false } : state;\n      }\n\n      const { clientX, clientY } = isTouch ? event.touches[0] : event;\n      const [x, y] = rotateXYByAngle([clientX, clientY], props.rotationAngle);\n      const deltaX = x - state.xy[0];\n      const deltaY = y - state.xy[1];\n      const absX = Math.abs(deltaX);\n      const absY = Math.abs(deltaY);\n      const time = (event.timeStamp || 0) - state.start;\n      const velocity = Math.sqrt(absX * absX + absY * absY) / (time || 1);\n      const vxvy: Vector2 = [deltaX / (time || 1), deltaY / (time || 1)];\n\n      const dir = getDirection(absX, absY, deltaX, deltaY);\n\n      // if swipe is under delta and we have not started to track a swipe: skip update\n      const delta =\n        typeof props.delta === \"number\"\n          ? props.delta\n          : props.delta[dir.toLowerCase() as Lowercase<SwipeDirections>] ||\n            defaultProps.delta;\n      if (absX < delta && absY < delta && !state.swiping) return state;\n\n      const eventData = {\n        absX,\n        absY,\n        deltaX,\n        deltaY,\n        dir,\n        event,\n        first: state.first,\n        initial: state.initial,\n        velocity,\n        vxvy,\n      };\n\n      // call onSwipeStart if present and is first swipe event\n      eventData.first && props.onSwipeStart && props.onSwipeStart(eventData);\n\n      // call onSwiping if present\n      props.onSwiping && props.onSwiping(eventData);\n\n      // track if a swipe is cancelable (handler for swiping or swiped(dir) exists)\n      // so we can call preventDefault if needed\n      let cancelablePageSwipe = false;\n      if (\n        props.onSwiping ||\n        props.onSwiped ||\n        props[`onSwiped${dir}` as keyof SwipeableDirectionCallbacks]\n      ) {\n        cancelablePageSwipe = true;\n      }\n\n      if (\n        cancelablePageSwipe &&\n        props.preventScrollOnSwipe &&\n        props.trackTouch &&\n        event.cancelable\n      ) {\n        event.preventDefault();\n      }\n\n      return {\n        ...state,\n        // first is now always false\n        first: false,\n        eventData,\n        swiping: true,\n      };\n    });\n  };\n\n  const onEnd = (event: HandledEvents) => {\n    set((state, props) => {\n      let eventData: SwipeEventData | undefined;\n      if (state.swiping && state.eventData) {\n        // if swipe is less than duration fire swiped callbacks\n        if (event.timeStamp - state.start < props.swipeDuration) {\n          eventData = { ...state.eventData, event };\n          props.onSwiped && props.onSwiped(eventData);\n\n          const onSwipedDir =\n            props[\n              `onSwiped${eventData.dir}` as keyof SwipeableDirectionCallbacks\n            ];\n          onSwipedDir && onSwipedDir(eventData);\n        }\n      } else {\n        props.onTap && props.onTap({ event });\n      }\n\n      props.onTouchEndOrOnMouseUp && props.onTouchEndOrOnMouseUp({ event });\n\n      return { ...state, ...initialState, eventData };\n    });\n  };\n\n  const cleanUpMouse = () => {\n    // safe to just call removeEventListener\n    document.removeEventListener(mouseMove, onMove);\n    document.removeEventListener(mouseUp, onUp);\n  };\n\n  const onUp = (e: HandledEvents) => {\n    cleanUpMouse();\n    onEnd(e);\n  };\n\n  /**\n   * The value of passive on touchMove depends on `preventScrollOnSwipe`:\n   * - true => { passive: false }\n   * - false => { passive: true } // Default\n   *\n   * NOTE: When preventScrollOnSwipe is true, we attempt to call preventDefault to prevent scroll.\n   *\n   * props.touchEventOptions can also be set for all touch event listeners,\n   * but for `touchmove` specifically when `preventScrollOnSwipe` it will\n   * supersede and force passive to false.\n   *\n   */\n  const attachTouch: AttachTouch = (el, props) => {\n    let cleanup = () => {};\n    if (el && el.addEventListener) {\n      const baseOptions = {\n        ...defaultProps.touchEventOptions,\n        ...props.touchEventOptions,\n      };\n      // attach touch event listeners and handlers\n      const tls: [\n        typeof touchStart | typeof touchMove | typeof touchEnd,\n        (e: HandledEvents) => void,\n        { passive: boolean }\n      ][] = [\n        [touchStart, onStart, baseOptions],\n        // preventScrollOnSwipe option supersedes touchEventOptions.passive\n        [\n          touchMove,\n          onMove,\n          {\n            ...baseOptions,\n            ...(props.preventScrollOnSwipe ? { passive: false } : {}),\n          },\n        ],\n        [touchEnd, onEnd, baseOptions],\n      ];\n      tls.forEach(([e, h, o]) => el.addEventListener(e, h, o));\n      // return properly scoped cleanup method for removing listeners, options not required\n      cleanup = () => tls.forEach(([e, h]) => el.removeEventListener(e, h));\n    }\n    return cleanup;\n  };\n\n  const onRef = (el: HTMLElement | null) => {\n    // \"inline\" ref functions are called twice on render, once with null then again with DOM element\n    // ignore null here\n    if (el === null) return;\n    set((state, props) => {\n      // if the same DOM el as previous just return state\n      if (state.el === el) return state;\n\n      const addState: { cleanUpTouch?: () => void } = {};\n      // if new DOM el clean up old DOM and reset cleanUpTouch\n      if (state.el && state.el !== el && state.cleanUpTouch) {\n        state.cleanUpTouch();\n        addState.cleanUpTouch = void 0;\n      }\n      // only attach if we want to track touch\n      if (props.trackTouch && el) {\n        addState.cleanUpTouch = attachTouch(el, props);\n      }\n\n      // store event attached DOM el for comparison, clean up, and re-attachment\n      return { ...state, el, ...addState };\n    });\n  };\n\n  // set ref callback to attach touch event listeners\n  const output: { ref: typeof onRef; onMouseDown?: typeof onStart } = {\n    ref: onRef,\n  };\n\n  // if track mouse attach mouse down listener\n  if (handlerProps.trackMouse) {\n    output.onMouseDown = onStart;\n  }\n\n  return [output, attachTouch];\n}\n\nfunction updateTransientState(\n  state: SwipeableState,\n  props: SwipeablePropsWithDefaultOptions,\n  previousProps: SwipeablePropsWithDefaultOptions,\n  attachTouch: AttachTouch\n) {\n  // if trackTouch is off or there is no el, then remove handlers if necessary and exit\n  if (!props.trackTouch || !state.el) {\n    if (state.cleanUpTouch) {\n      state.cleanUpTouch();\n    }\n\n    return {\n      ...state,\n      cleanUpTouch: undefined,\n    };\n  }\n\n  // trackTouch is on, so if there are no handlers attached, attach them and exit\n  if (!state.cleanUpTouch) {\n    return {\n      ...state,\n      cleanUpTouch: attachTouch(state.el, props),\n    };\n  }\n\n  // trackTouch is on and handlers are already attached, so if preventScrollOnSwipe changes value,\n  // remove and reattach handlers (this is required to update the passive option when attaching\n  // the handlers)\n  if (\n    props.preventScrollOnSwipe !== previousProps.preventScrollOnSwipe ||\n    props.touchEventOptions.passive !== previousProps.touchEventOptions.passive\n  ) {\n    state.cleanUpTouch();\n\n    return {\n      ...state,\n      cleanUpTouch: attachTouch(state.el, props),\n    };\n  }\n\n  return state;\n}\n\nexport function useSwipeable(options: SwipeableProps): SwipeableHandlers {\n  const { trackMouse } = options;\n  const transientState = React.useRef({ ...initialState });\n  const transientProps = React.useRef<SwipeablePropsWithDefaultOptions>({\n    ...defaultProps,\n  });\n\n  // track previous rendered props\n  const previousProps = React.useRef<SwipeablePropsWithDefaultOptions>({\n    ...transientProps.current,\n  });\n  previousProps.current = { ...transientProps.current };\n\n  // update current render props & defaults\n  transientProps.current = {\n    ...defaultProps,\n    ...options,\n  };\n  // Force defaults for config properties\n  let defaultKey: keyof ConfigurationOptions;\n  for (defaultKey in defaultProps) {\n    if (transientProps.current[defaultKey] === void 0) {\n      (transientProps.current[defaultKey] as any) = defaultProps[defaultKey];\n    }\n  }\n\n  const [handlers, attachTouch] = React.useMemo(\n    () =>\n      getHandlers(\n        (stateSetter) =>\n          (transientState.current = stateSetter(\n            transientState.current,\n            transientProps.current\n          )),\n        { trackMouse }\n      ),\n    [trackMouse]\n  );\n\n  transientState.current = updateTransientState(\n    transientState.current,\n    transientProps.current,\n    previousProps.current,\n    attachTouch\n  );\n\n  return handlers;\n}\n","import * as React from \"react\";\n\nexport const LEFT = \"Left\";\nexport const RIGHT = \"Right\";\nexport const UP = \"Up\";\nexport const DOWN = \"Down\";\nexport type HandledEvents = React.MouseEvent | TouchEvent | MouseEvent;\nexport type Vector2 = [number, number];\nexport type SwipeDirections =\n  | typeof LEFT\n  | typeof RIGHT\n  | typeof UP\n  | typeof DOWN;\nexport interface SwipeEventData {\n  /**\n   * Absolute displacement of swipe in x. Math.abs(deltaX);\n   */\n  absX: number;\n  /**\n   * Absolute displacement of swipe in y. Math.abs(deltaY);\n   */\n  absY: number;\n  /**\n   * Displacement of swipe in x. (current.x - initial.x)\n   */\n  deltaX: number;\n  /**\n   * Displacement of swipe in y. (current.y - initial.y)\n   */\n  deltaY: number;\n  /**\n   * Direction of swipe - Left | Right | Up | Down\n   */\n  dir: SwipeDirections;\n  /**\n   * Source event.\n   */\n  event: HandledEvents;\n  /**\n   * True for the first event of a tracked swipe.\n   */\n  first: boolean;\n  /**\n   * Location where swipe started - [x, y].\n   */\n  initial: Vector2;\n  /**\n   * \"Absolute velocity\" (speed) - √(absX^2 + absY^2) / time\n   */\n  velocity: number;\n  /**\n   * Velocity per axis - [ deltaX/time, deltaY/time ]\n   */\n  vxvy: Vector2;\n}\n\nexport type SwipeCallback = (eventData: SwipeEventData) => void;\nexport type TapCallback = ({ event }: { event: HandledEvents }) => void;\n\nexport type SwipeableDirectionCallbacks = {\n  /**\n   * Called after a DOWN swipe\n   */\n  onSwipedDown: SwipeCallback;\n  /**\n   * Called after a LEFT swipe\n   */\n  onSwipedLeft: SwipeCallback;\n  /**\n   * Called after a RIGHT swipe\n   */\n  onSwipedRight: SwipeCallback;\n  /**\n   * Called after a UP swipe\n   */\n  onSwipedUp: SwipeCallback;\n};\n\nexport type SwipeableCallbacks = SwipeableDirectionCallbacks & {\n  /**\n   * Called at start of a tracked swipe.\n   */\n  onSwipeStart: SwipeCallback;\n  /**\n   * Called after any swipe.\n   */\n  onSwiped: SwipeCallback;\n  /**\n   * Called for each move event during a tracked swipe.\n   */\n  onSwiping: SwipeCallback;\n  /**\n   * Called after a tap. A touch under the min distance, `delta`.\n   */\n  onTap: TapCallback;\n  /**\n   * Called for `touchstart` and `mousedown`.\n   */\n  onTouchStartOrOnMouseDown: TapCallback;\n  /**\n   * Called for `touchend` and `mouseup`.\n   */\n  onTouchEndOrOnMouseUp: TapCallback;\n};\n\n// Configuration Options\nexport type ConfigurationOptionDelta =\n  | number\n  | { [key in Lowercase<SwipeDirections>]?: number };\n\nexport interface ConfigurationOptions {\n  /**\n   * Min distance(px) before a swipe starts. **Default**: `10`\n   */\n  delta: ConfigurationOptionDelta;\n  /**\n   * Prevents scroll during swipe in most cases. **Default**: `false`\n   */\n  preventScrollOnSwipe: boolean;\n  /**\n   * Set a rotation angle. **Default**: `0`\n   */\n  rotationAngle: number;\n  /**\n   * Track mouse input. **Default**: `false`\n   */\n  trackMouse: boolean;\n  /**\n   * Track touch input. **Default**: `true`\n   */\n  trackTouch: boolean;\n  /**\n   * Allowable duration of a swipe (ms). **Default**: `Infinity`\n   */\n  swipeDuration: number;\n  /**\n   * Options for touch event listeners\n   */\n  touchEventOptions: { passive: boolean };\n}\n\nexport type SwipeableProps = Partial<SwipeableCallbacks & ConfigurationOptions>;\n\nexport type SwipeablePropsWithDefaultOptions = Partial<SwipeableCallbacks> &\n  ConfigurationOptions;\n\nexport interface SwipeableHandlers {\n  ref(element: HTMLElement | null): void;\n  onMouseDown?(event: React.MouseEvent): void;\n}\n\nexport type SwipeableState = {\n  cleanUpTouch?: () => void;\n  el?: HTMLElement;\n  eventData?: SwipeEventData;\n  first: boolean;\n  initial: Vector2;\n  start: number;\n  swiping: boolean;\n  xy: Vector2;\n};\n\nexport type StateSetter = (\n  state: SwipeableState,\n  props: SwipeablePropsWithDefaultOptions\n) => SwipeableState;\nexport type Setter = (stateSetter: StateSetter) => void;\nexport type AttachTouch = (\n  el: HTMLElement,\n  props: SwipeablePropsWithDefaultOptions\n) => () => void;\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSwipeable } from 'react-swipeable'; // You'll need to install this package\r\n\r\nconst DotsContainer = styled.div`\r\n  position: fixed;\r\n  right: 30px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n  z-index: 50;\r\n  \r\n  @media (max-width: 768px) {\r\n    right: 15px;\r\n    gap: 20px; /* Increased gap for better touch targets */\r\n  }\r\n  \r\n  @media (max-width: 480px) {\r\n    right: 10px;\r\n  }\r\n`;\r\n\r\nconst Dot = styled.div`\r\n  width: 12px;\r\n  height: 12px;\r\n  border-radius: 50%;\r\n  background: ${props => props.active ? '#ff4d79' : '#304878'};\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  position: relative;\r\n  \r\n  @media (max-width: 768px) {\r\n    width: 16px; /* Larger dots on mobile */\r\n    height: 16px;\r\n  }\r\n  \r\n  &:after {\r\n    content: '';\r\n    position: absolute;\r\n    top: -8px;\r\n    left: -8px;\r\n    right: -8px;\r\n    bottom: -8px;\r\n    border-radius: 50%;\r\n    border: 1px solid ${props => props.active ? '#ff4d79' : 'transparent'};\r\n    transition: all 0.3s ease;\r\n    opacity: ${props => props.active ? 1 : 0};\r\n    animation: ${props => props.active ? 'pulse 2s infinite' : 'none'};\r\n  }\r\n  \r\n  @keyframes pulse {\r\n    0% {\r\n      transform: scale(1);\r\n      opacity: 1;\r\n    }\r\n    50% {\r\n      transform: scale(1.5);\r\n      opacity: 0.5;\r\n    }\r\n    100% {\r\n      transform: scale(1);\r\n      opacity: 1;\r\n    }\r\n  }\r\n  \r\n  &:hover {\r\n    transform: scale(1.2);\r\n    background: #ff4d79;\r\n    box-shadow: 0 0 10px rgba(255, 77, 121, 0.5);\r\n  }\r\n  \r\n  /* Larger touch area for mobile */\r\n  &:before {\r\n    content: '';\r\n    position: absolute;\r\n    top: -15px;\r\n    left: -15px;\r\n    right: -15px;\r\n    bottom: -15px;\r\n    \r\n    @media (max-width: 768px) {\r\n      top: -20px;\r\n      left: -20px;\r\n      right: -20px;\r\n      bottom: -20px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst DotLabel = styled.span`\r\n  position: absolute;\r\n  right: 25px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  color: white;\r\n  font-size: 0.8rem;\r\n  opacity: 0;\r\n  transition: opacity 0.3s ease;\r\n  white-space: nowrap;\r\n  background: rgba(20, 23, 37, 0.85);\r\n  padding: 3px 8px;\r\n  border-radius: 4px;\r\n  \r\n  ${Dot}:hover & {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst SwipeIndicator = styled.div`\r\n  position: fixed;\r\n  bottom: 20px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  color: rgba(255, 255, 255, 0.7);\r\n  font-size: 0.85rem;\r\n  text-align: center;\r\n  opacity: 0.8;\r\n  display: none;\r\n  \r\n  @media (max-width: 768px) {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 10px;\r\n  }\r\n  \r\n  svg {\r\n    width: 24px;\r\n    height: 24px;\r\n    animation: swipeAnim 2s infinite ease-in-out;\r\n  }\r\n  \r\n  @keyframes swipeAnim {\r\n    0% {\r\n      transform: translateX(-5px);\r\n      opacity: 0.5;\r\n    }\r\n    50% {\r\n      transform: translateX(5px);\r\n      opacity: 1;\r\n    }\r\n    100% {\r\n      transform: translateX(-5px);\r\n      opacity: 0.5;\r\n    }\r\n  }\r\n`;\r\n\r\nconst NavigationDots = ({ total, active, onDotClick, labels = [], onSwipe }) => {\r\n  // Handle swipe gestures\r\n  const handlers = useSwipeable({\r\n    onSwipedUp: () => onSwipe && active < total && onSwipe(active + 1),\r\n    onSwipedDown: () => onSwipe && active > 1 && onSwipe(active - 1),\r\n    preventDefaultTouchmoveEvent: true,\r\n    trackMouse: false\r\n  });\r\n  \r\n  const dots = Array.from({ length: total }, (_, i) => i + 1);\r\n  \r\n  return (\r\n    <>\r\n      <div {...handlers}>\r\n        <DotsContainer>\r\n          {dots.map(id => (\r\n            <Dot \r\n              key={id} \r\n              active={active === id}\r\n              onClick={() => onDotClick(id)}\r\n            >\r\n              <DotLabel>{labels[id - 1] || `Checkpoint ${id}`}</DotLabel>\r\n            </Dot>\r\n          ))}\r\n        </DotsContainer>\r\n      </div>\r\n      \r\n      <SwipeIndicator>\r\n        <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path d=\"M7 13L12 18L17 13\" stroke=\"white\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n          <path d=\"M7 7L12 12L17 7\" stroke=\"white\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n        </svg>\r\n        Swipe to navigate\r\n      </SwipeIndicator>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(NavigationDots);"],"names":["defaultProps","delta","preventScrollOnSwipe","rotationAngle","trackMouse","trackTouch","swipeDuration","Infinity","touchEventOptions","passive","initialState","first","initial","start","swiping","xy","mouseMove","mouseUp","rotateXYByAngle","pos","angle","angleInRadians","Math","PI","cos","sin","getHandlers","set","handlerProps","onStart","event","isTouch","touches","length","state","props","document","addEventListener","onMove","onUp","clientX","clientY","onTouchStartOrOnMouseDown","Object","assign","slice","timeStamp","x","y","deltaX","deltaY","absX","abs","absY","time","velocity","sqrt","vxvy","dir","getDirection","toLowerCase","eventData","onSwipeStart","onSwiping","cancelablePageSwipe","onSwiped","cancelable","preventDefault","onEnd","onSwipedDir","onTap","onTouchEndOrOnMouseUp","e","removeEventListener","attachTouch","el","cleanup","baseOptions","tls","forEach","_ref","h","o","_ref2","output","ref","addState","cleanUpTouch","onMouseDown","useSwipeable","options","transientState","React","transientProps","previousProps","current","defaultKey","handlers","stateSetter","undefined","updateTransientState","DotsContainer","styled","div","Dot","active","DotLabel","span","SwipeIndicator","NavigationDots","total","onDotClick","labels","onSwipe","onSwipedUp","onSwipedDown","preventDefaultTouchmoveEvent","dots","Array","from","_","i","_jsxs","_Fragment","children","_jsx","map","id","onClick","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin"],"sourceRoot":""}